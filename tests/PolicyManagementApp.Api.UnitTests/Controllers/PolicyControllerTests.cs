//Generated by AI
using FluentAssertions;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Moq;
using PolicyManagement.Application.DTOs.Policy;
using PolicyManagement.Application.Interfaces.Services;
using PolicyManagement.Domain.Enums;
using PolicyManagementApp.Api.Controllers;
using System.Security.Claims;
using Xunit;

namespace PolicyManagementApp.Api.UnitTests.Controllers;

public class PolicyControllerTests
{
    private readonly Mock<IPolicyService> _mockPolicyService;
    private readonly Mock<IMultipleTenantPolicyService> _mockMultipleTenantPolicyService;
    private readonly Mock<ILogger<PolicyController>> _mockLogger;
    private readonly PolicyController _controller;

    public PolicyControllerTests()
    {
        _mockPolicyService = new Mock<IPolicyService>();
        _mockMultipleTenantPolicyService = new Mock<IMultipleTenantPolicyService>();
        _mockLogger = new Mock<ILogger<PolicyController>>();
        
        _controller = new PolicyController(
            _mockPolicyService.Object,
            _mockMultipleTenantPolicyService.Object,
            _mockLogger.Object);
    }

    [Fact]
    public async Task GetPoliciesBasedOnUserRole_AsSuperAdmin_ReturnsAllTenantPolicies()
    {
        // Arrange
        var pageNumber = 1;
        var pageSize = 10;
        var policyResponseDto = new PolicyResponseDto
        {
            Policies = new List<PolicyDto>
            {
                new PolicyDto { Id = 1, Name = "Policy 1", TenantId = "tenant1" },
                new PolicyDto { Id = 2, Name = "Policy 2", TenantId = "tenant2" }
            },
            TotalCount = 2,
            PageNumber = pageNumber,
            PageSize = pageSize
        };

        _mockMultipleTenantPolicyService
            .Setup(s => s.GetPoliciesAcrossTenantsAsync(pageNumber, pageSize, "id", "asc", It.IsAny<CancellationToken>()))
            .ReturnsAsync(policyResponseDto);

        // Set up claims for SuperAdmin role
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Role, nameof(Role.TenantsSuperAdmin))
        };
        var identity = new ClaimsIdentity(claims, "Test");
        var user = new ClaimsPrincipal(identity);

        _controller.ControllerContext = new ControllerContext
        {
            HttpContext = new DefaultHttpContext { User = user }
        };

        // Act
        var result = await _controller.GetPoliciesBasedOnUserRole(pageNumber, pageSize, "id", "asc");

        // Assert
        var okResult = result.Should().BeOfType<OkObjectResult>().Subject;
        okResult.Value.Should().BeEquivalentTo(policyResponseDto);
    }

    [Fact]
    public async Task CreatePolicy_WithValidData_ReturnsCreatedPolicy()
    {
        // Arrange
        var createPolicyDto = new CreatePolicyDto
        {
            Name = "New Policy",
            Description = "Test policy description",
            TenantId = "tenant1"
        };

        var createdPolicy = new PolicyDto
        {
            Id = 1,
            Name = "New Policy",
            Description = "Test policy description",
            TenantId = "tenant1"
        };

        _mockPolicyService
            .Setup(s => s.CreatePolicyAsync(createPolicyDto, It.IsAny<CancellationToken>()))
            .ReturnsAsync(createdPolicy);

        // Set up claims for TenantAdmin role
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Role, nameof(Role.TenantAdmin)),
            new Claim("apptenid", "tenant1")
        };
        var identity = new ClaimsIdentity(claims, "Test");
        var user = new ClaimsPrincipal(identity);

        _controller.ControllerContext = new ControllerContext
        {
            HttpContext = new DefaultHttpContext { User = user }
        };

        // Act
        var result = await _controller.CreatePolicy(createPolicyDto);

        // Assert
        var okResult = result.Should().BeOfType<OkObjectResult>().Subject;
        okResult.Value.Should().BeEquivalentTo(createdPolicy);
    }

    [Fact]
    public async Task GetPolicyById_WithValidId_ReturnsPolicy()
    {
        // Arrange
        var policyId = 1;
        var tenantId = "tenant1";
        var policy = new PolicyDto 
        { 
            Id = policyId, 
            Name = "Test Policy", 
            Description = "Test Description",
            TenantId = tenantId 
        };

        _mockPolicyService
            .Setup(s => s.GetPolicyByIdAsync(policyId, tenantId, It.IsAny<CancellationToken>()))
            .ReturnsAsync(policy);

        // Set up claims for SuperAdmin role
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Role, nameof(Role.TenantsSuperAdmin))
        };
        var identity = new ClaimsIdentity(claims, "Test");
        var user = new ClaimsPrincipal(identity);

        _controller.ControllerContext = new ControllerContext
        {
            HttpContext = new DefaultHttpContext { User = user }
        };

        // Act
        var result = await _controller.GetPolicyById(policyId, tenantId);

        // Assert
        var okResult = result.Should().BeOfType<OkObjectResult>().Subject;
        okResult.Value.Should().BeEquivalentTo(policy);
    }

    [Fact]
    public async Task DeletePolicy_WithValidId_ReturnsDeletedPolicy()
    {
        // Arrange
        var policyId = 1;
        var deletedPolicy = new PolicyDto 
        { 
            Id = policyId, 
            Name = "Deleted Policy", 
            TenantId = "tenant1" 
        };

        _mockPolicyService
            .Setup(s => s.DeletePolicyAsync(policyId, It.IsAny<CancellationToken>()))
            .ReturnsAsync(deletedPolicy);

        // Act
        var result = await _controller.DeletePolicy(policyId);

        // Assert
        var okResult = result.Should().BeOfType<OkObjectResult>().Subject;
        okResult.Value.Should().BeEquivalentTo(deletedPolicy);
    }
} 