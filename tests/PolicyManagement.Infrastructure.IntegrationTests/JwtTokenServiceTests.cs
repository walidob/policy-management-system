//Generated by AI
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using FluentAssertions;
using Microsoft.Extensions.Options;
using Moq;
using PolicyManagement.Domain.Entities.DefaultDb.Identity;
using PolicyManagement.Infrastructure.Services;

namespace PolicyManagement.Infrastructure.IntegrationTests;

public class JwtTokenServiceTests
{
    private readonly JwtSettings _jwtSettings;
    private readonly Mock<IOptions<JwtSettings>> _jwtSettingsOptions;
    private readonly JwtTokenService _jwtTokenService;
    
    public JwtTokenServiceTests()
    {
        // Arrange
        _jwtSettings = new JwtSettings
        {
            Key = "YourSuperSecretKeyForTestingWithAtLeast32Characters",
            Issuer = "test-issuer",
            Audience = "test-audience",
            ExpiryMinutes = 60
        };

        _jwtSettingsOptions = new Mock<IOptions<JwtSettings>>();
        _jwtSettingsOptions.Setup(x => x.Value).Returns(_jwtSettings);
        
        _jwtTokenService = new JwtTokenService(_jwtSettingsOptions.Object);
    }

    [Fact]
    public void GenerateToken_ShouldReturnValidJwtToken()
    {
        // Arrange
        var userId = 1001;
        var user = new ApplicationUser
        {
            Id = userId,
            UserName = "testuser",
            Email = "test@example.com",
            TenantId = "tenant-1"
        };
        
        var roles = new List<string> { "Admin", "User" };

        // Act
        var token = _jwtTokenService.GenerateToken(user, roles);

        // Assert
        token.Should().NotBeNullOrEmpty();
        
        var tokenHandler = new JwtSecurityTokenHandler();
        var jwtToken = tokenHandler.ReadJwtToken(token);
        
        jwtToken.Should().NotBeNull();
        jwtToken.Issuer.Should().Be(_jwtSettings.Issuer);
        jwtToken.Audiences.Should().Contain(_jwtSettings.Audience);
        
        // Verify claims
        jwtToken.Claims.Should().Contain(c => c.Type == JwtRegisteredClaimNames.Sub && c.Value == userId.ToString());
        jwtToken.Claims.Should().Contain(c => c.Type == JwtRegisteredClaimNames.Email && c.Value == user.Email);
        jwtToken.Claims.Should().Contain(c => c.Type == ClaimTypes.Name && c.Value == user.UserName);
        jwtToken.Claims.Should().Contain(c => c.Type == "uid" && c.Value == userId.ToString());
        jwtToken.Claims.Should().Contain(c => c.Type == "apptenid" && c.Value == user.TenantId);
        
        // Verify roles
        jwtToken.Claims.Should().Contain(c => c.Type == ClaimTypes.Role && c.Value == "Admin");
        jwtToken.Claims.Should().Contain(c => c.Type == ClaimTypes.Role && c.Value == "User");
    }

    [Fact]
    public void GenerateToken_WithNullTenantId_ShouldIncludeEmptyTenantIdClaim()
    {
        // Arrange
        var userId = 1002;
        var user = new ApplicationUser
        {
            Id = userId,
            UserName = "userwithouttenant",
            Email = "notenant@example.com",
            TenantId = null
        };
        
        var roles = new List<string> { "User" };

        // Act
        var token = _jwtTokenService.GenerateToken(user, roles);

        // Assert
        var tokenHandler = new JwtSecurityTokenHandler();
        var jwtToken = tokenHandler.ReadJwtToken(token);
        
        jwtToken.Claims.Should().Contain(c => c.Type == "apptenid" && c.Value == string.Empty);
    }
} 