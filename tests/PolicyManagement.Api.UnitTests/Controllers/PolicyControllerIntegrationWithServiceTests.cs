//Generated by AI
using FluentAssertions;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Moq;
using PolicyManagement.Application.DTOs.Policy;
using PolicyManagement.Application.Interfaces.Services;
using PolicyManagementApp.Api.Controllers;
using System.Security.Claims;
using Xunit;

namespace PolicyManagement.Api.UnitTests.Controllers;

public class PolicyControllerIntegrationWithServiceTests
{
    private readonly Mock<IPolicyService> _mockPolicyService;
    private readonly Mock<IMultipleTenantPolicyService> _mockMultipleTenantPolicyService;
    private readonly Mock<IClientPolicyService> _mockClientPolicyService;
    private readonly PolicyController _controller;

    public PolicyControllerIntegrationWithServiceTests()
    {
        _mockPolicyService = new Mock<IPolicyService>();
        _mockMultipleTenantPolicyService = new Mock<IMultipleTenantPolicyService>();
        _mockClientPolicyService = new Mock<IClientPolicyService>();
        
        _controller = new PolicyController(
            _mockPolicyService.Object,
            _mockMultipleTenantPolicyService.Object,
            _mockClientPolicyService.Object);
    }

    [Fact]
    public async Task GetPolicies_CallsService_ExactlyOnce()
    {
        // Arrange
        var pageNumber = 1;
        var pageSize = 10;
        var policyResponseDto = new PolicyResponseDto
        {
            Policies = new List<PolicyDto>(),
            TotalCount = 0,
            PageNumber = pageNumber,
            PageSize = pageSize
        };

        _mockPolicyService
            .Setup(s => s.GetPoliciesPaginatedAsync(pageNumber, pageSize))
            .ReturnsAsync(policyResponseDto)
            .Verifiable();

        // Act
        await _controller.GetPolicies(pageNumber, pageSize);

        // Assert
        _mockPolicyService.Verify(s => s.GetPoliciesPaginatedAsync(pageNumber, pageSize), Times.Once);
    }

    [Fact]
    public async Task GetAllPoliciesAcrossTenants_CallsService_ExactlyOnce()
    {
        // Arrange
        var pageNumber = 1;
        var pageSize = 10;
        var policyResponseDto = new PolicyResponseDto
        {
            Policies = new List<PolicyDto>(),
            TotalCount = 0,
            PageNumber = pageNumber,
            PageSize = pageSize
        };

        _mockMultipleTenantPolicyService
            .Setup(s => s.GetAllPoliciesAcrossTenantsAsync(pageNumber, pageSize))
            .ReturnsAsync(policyResponseDto)
            .Verifiable();

        // Act
        await _controller.GetAllPoliciesAcrossTenants(pageNumber, pageSize);

        // Assert
        _mockMultipleTenantPolicyService.Verify(s => s.GetAllPoliciesAcrossTenantsAsync(pageNumber, pageSize), Times.Once);
    }

    [Fact]
    public async Task GetUserPolicies_CallsService_ExactlyOnce()
    {
        // Arrange
        var userId = 1;
        var pageNumber = 1;
        var pageSize = 10;
        var policyResponseDto = new PolicyResponseDto
        {
            Policies = new List<PolicyDto>(),
            TotalCount = 0,
            PageNumber = pageNumber,
            PageSize = pageSize
        };

        _mockClientPolicyService
            .Setup(s => s.GetUserPoliciesAsync(userId, pageNumber, pageSize))
            .ReturnsAsync(policyResponseDto)
            .Verifiable();

        // Set up claims for the user
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.NameIdentifier, userId.ToString())
        };
        var identity = new ClaimsIdentity(claims, "Test");
        var claimsPrincipal = new ClaimsPrincipal(identity);

        _controller.ControllerContext = new ControllerContext
        {
            HttpContext = new DefaultHttpContext { User = claimsPrincipal }
        };

        // Act
        await _controller.GetUserPolicies(pageNumber, pageSize);

        // Assert
        _mockClientPolicyService.Verify(s => s.GetUserPoliciesAsync(userId, pageNumber, pageSize), Times.Once);
    }

    [Fact]
    public async Task CrudOperations_ExecuteServiceMethodsCorrectly()
    {
        // Arrange
        var policyId = 1;
        var policyDto = new PolicyDto { Id = policyId, Name = "Test Policy" };
        var createPolicyDto = new CreatePolicyDto { Name = "New Policy" };
        var updatePolicyDto = new UpdatePolicyDto { Id = policyId, Name = "Test Policy" };

        _mockPolicyService.Setup(s => s.GetPolicyByIdAsync(policyId)).ReturnsAsync(policyDto).Verifiable();
        _mockPolicyService.Setup(s => s.CreatePolicyAsync(It.IsAny<CreatePolicyDto>())).ReturnsAsync(policyDto).Verifiable();
        _mockPolicyService.Setup(s => s.UpdatePolicyAsync(policyId, It.IsAny<UpdatePolicyDto>())).ReturnsAsync(policyDto).Verifiable();
        _mockPolicyService.Setup(s => s.DeletePolicyAsync(policyId)).ReturnsAsync(policyDto).Verifiable();

        // Set up claims for admin role to avoid policy access check failure
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Role, "SuperAdmin")
        };
        var identity = new ClaimsIdentity(claims, "Test");
        var claimsPrincipal = new ClaimsPrincipal(identity);

        _controller.ControllerContext = new ControllerContext
        {
            HttpContext = new DefaultHttpContext { User = claimsPrincipal }
        };

        // Act - Perform CRUD operations
        await _controller.GetPolicy(policyId);
        await _controller.CreatePolicy(createPolicyDto);
        await _controller.UpdatePolicy(policyId, updatePolicyDto);
        await _controller.DeletePolicy(policyId);

        // Assert - Verify all service methods were called exactly once
        _mockPolicyService.Verify(s => s.GetPolicyByIdAsync(policyId), Times.Once);
        _mockPolicyService.Verify(s => s.CreatePolicyAsync(It.IsAny<CreatePolicyDto>()), Times.Once);
        _mockPolicyService.Verify(s => s.UpdatePolicyAsync(policyId, It.IsAny<UpdatePolicyDto>()), Times.Once);
        _mockPolicyService.Verify(s => s.DeletePolicyAsync(policyId), Times.Once);
    }

    [Fact]
    public async Task UpdatePolicy_WithMismatchedIds_ThrowsArgumentException()
    {
        // Arrange
        var policyId = 1;
        var updatePolicyDto = new UpdatePolicyDto { Id = 2, Name = "Policy with different ID" };
        
        _mockPolicyService
            .Setup(s => s.UpdatePolicyAsync(policyId, updatePolicyDto))
            .ThrowsAsync(new ArgumentException("ID not found"));

        // Act
        var result = await _controller.UpdatePolicy(policyId, updatePolicyDto);

        // Assert
        var badRequestResult = result.Should().BeOfType<BadRequestObjectResult>().Subject;
        badRequestResult.Value.Should().Be("ID not found");
        _mockPolicyService.Verify(s => s.UpdatePolicyAsync(policyId, updatePolicyDto), Times.Once);
    }
} 