//Generated by AI (lack of time)
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Hosting;
using Moq;
using PolicyManagementApp.Api.Middleware;
using Microsoft.AspNetCore.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using System.Diagnostics;

namespace PolicyManagementApp.Api.UnitTests.Middleware;

public class GlobalExceptionHandlerTests
{
    private readonly Mock<IWebHostEnvironment> _environmentMock;
    private readonly Mock<IProblemDetailsService> _problemDetailsServiceMock;
    private readonly DefaultHttpContext _httpContext;
    private readonly GlobalExceptionHandler _exceptionHandler;

    public GlobalExceptionHandlerTests()
    {
        _environmentMock = new Mock<IWebHostEnvironment>();
        _problemDetailsServiceMock = new Mock<IProblemDetailsService>();
        _httpContext = new DefaultHttpContext();
        _httpContext.TraceIdentifier = "test-trace-id";
        _httpContext.Request.Path = "/api/test";
        
        _exceptionHandler = new GlobalExceptionHandler(_environmentMock.Object, _problemDetailsServiceMock.Object);

        _problemDetailsServiceMock
            .Setup(x => x.TryWriteAsync(It.IsAny<ProblemDetailsContext>()))
            .ReturnsAsync(true);
    }

    [Fact]
    public async Task TryHandleAsync_WithArgumentException_ShouldReturn400StatusCode()
    {
        // Arrange
        var exception = new ArgumentException("Invalid argument");
        
        // Act
        var result = await _exceptionHandler.TryHandleAsync(_httpContext, exception, default);

        // Assert
        Assert.True(result);
        
        _problemDetailsServiceMock.Verify(
            x => x.TryWriteAsync(It.Is<ProblemDetailsContext>(ctx => 
                ctx.ProblemDetails.Status == StatusCodes.Status400BadRequest &&
                ctx.ProblemDetails.Type == nameof(ArgumentException) &&
                ctx.ProblemDetails.Instance == "/api/test")),
            Times.Once);
    }

    [Fact]
    public async Task TryHandleAsync_WithUnauthorizedAccessException_ShouldReturn401StatusCode()
    {
        // Arrange
        var exception = new UnauthorizedAccessException("Unauthorized");
        
        // Act
        var result = await _exceptionHandler.TryHandleAsync(_httpContext, exception, default);

        // Assert
        Assert.True(result);
        
        _problemDetailsServiceMock.Verify(
            x => x.TryWriteAsync(It.Is<ProblemDetailsContext>(ctx => 
                ctx.ProblemDetails.Status == StatusCodes.Status401Unauthorized &&
                ctx.ProblemDetails.Type == nameof(UnauthorizedAccessException))),
            Times.Once);
    }

    [Fact]
    public async Task TryHandleAsync_WithKeyNotFoundException_ShouldReturn404StatusCode()
    {
        // Arrange
        var exception = new KeyNotFoundException("Not found");
        
        // Act
        var result = await _exceptionHandler.TryHandleAsync(_httpContext, exception, default);

        // Assert
        Assert.True(result);
        
        _problemDetailsServiceMock.Verify(
            x => x.TryWriteAsync(It.Is<ProblemDetailsContext>(ctx => 
                ctx.ProblemDetails.Status == StatusCodes.Status404NotFound &&
                ctx.ProblemDetails.Type == nameof(KeyNotFoundException))),
            Times.Once);
    }

    [Fact]
    public async Task TryHandleAsync_WithGenericException_ShouldReturn500StatusCode()
    {
        // Arrange
        var exception = new Exception("Server error");
        
        // Act
        var result = await _exceptionHandler.TryHandleAsync(_httpContext, exception, default);

        // Assert
        Assert.True(result);
        
        _problemDetailsServiceMock.Verify(
            x => x.TryWriteAsync(It.Is<ProblemDetailsContext>(ctx => 
                ctx.ProblemDetails.Status == StatusCodes.Status500InternalServerError &&
                ctx.ProblemDetails.Type == nameof(Exception))),
            Times.Once);
    }

    [Fact]
    public async Task TryHandleAsync_InDevelopmentEnvironment_ShouldIncludeDetailedInfo()
    {
        // Arrange
        var exception = new Exception("Detailed error message");
        _environmentMock.Setup(x => x.EnvironmentName).Returns("Development");
        
        // Act
        var result = await _exceptionHandler.TryHandleAsync(_httpContext, exception, default);

        // Assert
        Assert.True(result);
        
        _problemDetailsServiceMock.Verify(
            x => x.TryWriteAsync(It.Is<ProblemDetailsContext>(ctx => 
                ctx.ProblemDetails.Detail == "Detailed error message" &&
                ctx.ProblemDetails.Extensions.ContainsKey("stackTrace"))),
            Times.Once);
    }

    [Fact]
    public async Task TryHandleAsync_InProductionEnvironment_ShouldNotIncludeDetailedInfo()
    {
        // Arrange
        var exception = new Exception("Detailed error message");
        _environmentMock.Setup(x => x.EnvironmentName).Returns("Production");
        
        // Act
        var result = await _exceptionHandler.TryHandleAsync(_httpContext, exception, default);

        // Assert
        Assert.True(result);
        
        _problemDetailsServiceMock.Verify(
            x => x.TryWriteAsync(It.Is<ProblemDetailsContext>(ctx => 
                ctx.ProblemDetails.Detail == "An error occurred processing your request." &&
                !ctx.ProblemDetails.Extensions.ContainsKey("stackTrace"))),
            Times.Once);
    }

    [Fact]
    public async Task TryHandleAsync_ShouldAlwaysIncludeTraceId()
    {
        // Arrange
        var exception = new Exception("Test exception");
        
        // Act
        var result = await _exceptionHandler.TryHandleAsync(_httpContext, exception, default);

        // Assert
        Assert.True(result);
        
        _problemDetailsServiceMock.Verify(
            x => x.TryWriteAsync(It.Is<ProblemDetailsContext>(ctx => 
                ctx.ProblemDetails.Extensions.ContainsKey("traceId"))),
            Times.Once);
    }
} 