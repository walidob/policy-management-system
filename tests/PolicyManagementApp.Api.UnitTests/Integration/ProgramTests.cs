//Generated by AI (lack of time)
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.TestHost;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.AspNetCore.Mvc.Testing;
using System.Net;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Finbuckle.MultiTenant;
using Microsoft.VisualStudio.TestPlatform.TestHost;
using PolicyManagement.Application.Extensions;
using PolicyManagementApp.Api.Middleware;
using PolicyManagement.Infrastructure.Extensions;
using Finbuckle.MultiTenant.Abstractions;
using PolicyManagementApp.Api.Extensions;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Diagnostics;

namespace PolicyManagementApp.Api.UnitTests.Integration;

public class ProgramTests : IClassFixture<WebApplicationFactory<Program>>
{
    private readonly WebApplicationFactory<Program> _factory;

    public ProgramTests(WebApplicationFactory<Program> factory)
    {
        _factory = factory.WithWebHostBuilder(builder =>
        {
            builder.ConfigureServices(services =>
            {
                // Replace real auth with test auth if needed
                services.AddAuthentication(options =>
                {
                    options.DefaultAuthenticateScheme = "Test";
                    options.DefaultChallengeScheme = "Test";
                });
            });
        });
    }

    [Fact]
    public void ConfigureServices_RegistersRequiredServices()
    {
        // Arrange
        var builder = WebApplication.CreateBuilder();
        
        // Act
        builder.Services.AddApplicationServices()
            .AddInfrastructureServices(builder.Configuration)
            .AddApiOutputCache()
            .AddApiRateLimiting();
            
        builder.Services.AddControllers();
        builder.Services.AddMemoryCache();
        builder.Services.AddProblemDetails();
        builder.Services.AddExceptionHandler<GlobalExceptionHandler>();
        builder.Services.AddOpenApi();
        builder.Services.AddHealthChecks();
        
        var app = builder.Build();
        var serviceProvider = app.Services;
        
        // Assert
        Assert.NotNull(serviceProvider.GetService<IProblemDetailsService>());
        Assert.NotNull(serviceProvider.GetService<IExceptionHandler>());
        Assert.NotNull(serviceProvider.GetService<IMultiTenantContextAccessor>());
    }
    
    [Fact]
    public void Configure_RegistersRequiredMiddleware()
    {
        // Act & Assert - If these can be built without exceptions, the middleware registration is valid
        var builder = WebApplication.CreateBuilder();
        
        builder.Services.AddApplicationServices()
            .AddInfrastructureServices(builder.Configuration)
            .AddApiOutputCache()
            .AddApiRateLimiting();
            
        builder.Services.AddControllers();
        builder.Services.AddMemoryCache();
        builder.Services.AddProblemDetails();
        builder.Services.AddExceptionHandler<GlobalExceptionHandler>();
        builder.Services.AddOpenApi();
        builder.Services.AddHealthChecks();
        
        var app = builder.Build();
        
        // These should not throw exceptions if properly registered
        app.UseExceptionHandler();
        app.UseDefaultFiles();
        app.UseHttpsRedirection();
        app.UseStatusCodePages();
        app.UseCookiePolicy();
        app.UseOutputCache();
        app.UseRateLimiter();
        app.UseAuthentication();
        app.UseAuthorization();
        app.UseMultiTenant();
        app.MapControllers();
        app.MapHealthChecks("/health");
        
        Assert.NotNull(app);
    }
}