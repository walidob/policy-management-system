//Generated by AI (lack of time)
using FluentAssertions;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Moq;
using PolicyManagement.Application.Contracts.Identity;
using PolicyManagement.Domain.Entities.DefaultDb.Identity;
using PolicyManagementApp.Api.Controllers;
using System.Security.Claims;

namespace PolicyManagementApp.Api.UnitTests.Controllers;

public class AuthControllerTests
{
    private readonly Mock<IAuthService> _authServiceMock;
    private readonly AuthController _controller;

    public AuthControllerTests()
    {
        _authServiceMock = new Mock<IAuthService>();
        _controller = new AuthController(_authServiceMock.Object);
        
        // Set up HttpContext for controller
        _controller.ControllerContext = new ControllerContext
        {
            HttpContext = new DefaultHttpContext()
        };
    }

    [Fact]
    public void CheckAuth_WhenError_ShouldReturnUnauthorized()
    {
        // Arrange - set up null User to force exception
        _controller.ControllerContext = new ControllerContext
        {
            HttpContext = new DefaultHttpContext { User = null }
        };

        // Act
        var actionResult = _controller.CheckAuth();

        // Assert
        var result = actionResult.Result.Should().BeOfType<UnauthorizedResult>().Subject;
        Assert.NotNull(result);
    }
} 