//Generated by AI
using FluentAssertions;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Moq;
using PolicyManagement.Application.Contracts.Identity;
using PolicyManagement.Domain.Entities.DefaultDb.Identity;
using PolicyManagement.Domain.Enums;
using PolicyManagementApp.Api.Controllers;
using System.Security.Claims;
using System.Text.Json;
using Xunit;

namespace PolicyManagementApp.Api.UnitTests.Controllers;

public class AuthControllerTests
{
    private readonly Mock<IAuthService> _mockAuthService;
    private readonly AuthController _controller;

    public AuthControllerTests()
    {
        _mockAuthService = new Mock<IAuthService>();
        _controller = new AuthController(_mockAuthService.Object);
    }

    [Fact]
    public async Task Login_WithValidCredentials_ReturnsOkObjectResult()
    {
        // Arrange
        var authRequest = new AuthenticationRequest
        {
            Email = "test@example.com",
            Password = "P@ssw0rd"
        };

        var authResponse = new AuthenticationResponse
        {
            Id = 1,
            Username = "testuser",
            Email = "test@example.com",
            FirstName = "Test",
            LastName = "User",
            JwtToken = "test-jwt-token",
            TokenExpires = DateTime.UtcNow.AddHours(1)
        };

        _mockAuthService
            .Setup(s => s.AuthenticateAsync(authRequest))
            .ReturnsAsync(authResponse);

        // Act
        var result = await _controller.Login(authRequest);

        // Assert
        var okResult = result.Result.Should().BeOfType<OkObjectResult>().Subject;
        var responseValue = okResult.Value;
        
        // Check only the properties we know will be in the anonymous object
        JsonSerializer.Serialize(responseValue).Should().Contain("\"id\":1");
        JsonSerializer.Serialize(responseValue).Should().Contain("\"username\":\"testuser\"");
        JsonSerializer.Serialize(responseValue).Should().Contain("\"email\":\"test@example.com\"");
    }

    [Fact]
    public async Task Login_WithInvalidCredentials_ReturnsBadRequest()
    {
        // Arrange
        var authRequest = new AuthenticationRequest
        {
            Email = "test@example.com",
            Password = "wrongpassword"
        };

        _mockAuthService
            .Setup(s => s.AuthenticateAsync(authRequest))
            .ThrowsAsync(new Exception("Authentication failed"));

        // Act
        var result = await _controller.Login(authRequest);

        // Assert
        result.Result.Should().BeOfType<BadRequestObjectResult>();
    }

    [Fact]
    public async Task Logout_ReturnsOkResult()
    {
        // Arrange
        _mockAuthService
            .Setup(s => s.LogoutAsync())
            .Returns(Task.CompletedTask);

        // Act
        var result = await _controller.Logout();

        // Assert
        result.Should().BeOfType<OkObjectResult>();
        var okResult = (OkObjectResult)result;
        
        // Convert the anonymous object to a JsonElement for safe property access
        var json = JsonSerializer.Serialize(okResult.Value);
        var jsonElement = JsonSerializer.Deserialize<JsonElement>(json);
        
        jsonElement.GetProperty("message").GetString().Should().Be("Logged out successfully");
    }
    
    [Fact]
    public void CheckAuth_WithAuthenticatedUser_ReturnsUserInfo()
    {
        // Arrange
        var userId = "1";
        var email = "test@example.com";
        var username = "testuser";
        var firstName = "Test";
        var lastName = "User";
        var tenantId = "tenant1";
        var roles = new[] { nameof(Role.TenantAdmin) };
        
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.NameIdentifier, userId),
            new Claim(ClaimTypes.Email, email),
            new Claim(ClaimTypes.Name, username),
            new Claim(ClaimTypes.GivenName, firstName),
            new Claim(ClaimTypes.Surname, lastName),
            new Claim("apptenid", tenantId),
            new Claim(ClaimTypes.Role, nameof(Role.TenantAdmin)),
            new Claim("is_super_admin", "false")
        };

        var identity = new ClaimsIdentity(claims, "Test");
        var user = new ClaimsPrincipal(identity);

        _controller.ControllerContext = new ControllerContext
        {
            HttpContext = new DefaultHttpContext { User = user }
        };

        // Act
        var result = _controller.CheckAuth();

        // Assert
        var okResult = result.Result.Should().BeOfType<OkObjectResult>().Subject;
        
        // Validate properties using JsonSerializer
        var json = JsonSerializer.Serialize(okResult.Value);
        var jsonElement = JsonSerializer.Deserialize<JsonElement>(json);
        
        jsonElement.GetProperty("id").GetString().Should().Be(userId);
        jsonElement.GetProperty("email").GetString().Should().Be(email);
        jsonElement.GetProperty("username").GetString().Should().Be(username);
        jsonElement.GetProperty("firstName").GetString().Should().Be(firstName);
        jsonElement.GetProperty("lastName").GetString().Should().Be(lastName);
        jsonElement.GetProperty("tenantId").GetString().Should().Be(tenantId);
        jsonElement.GetProperty("isAuthenticated").GetBoolean().Should().BeTrue();
        jsonElement.GetProperty("isSuperAdmin").GetBoolean().Should().BeFalse();
        
        // Check roles array
        var rolesArray = jsonElement.GetProperty("roles");
        rolesArray.GetArrayLength().Should().Be(1);
        rolesArray[0].GetString().Should().Be(nameof(Role.TenantAdmin));
    }
    
    [Fact]
    public void CheckAuth_WithSuperAdmin_ReturnsCorrectSuperAdminFlag()
    {
        // Arrange
        var userId = "1";
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.NameIdentifier, userId),
            new Claim(ClaimTypes.Email, "admin@example.com"),
            new Claim(ClaimTypes.Role, nameof(Role.TenantsSuperAdmin)),
            new Claim("is_super_admin", "true")
        };

        var identity = new ClaimsIdentity(claims, "Test");
        var user = new ClaimsPrincipal(identity);

        _controller.ControllerContext = new ControllerContext
        {
            HttpContext = new DefaultHttpContext { User = user }
        };

        // Act
        var result = _controller.CheckAuth();

        // Assert
        var okResult = result.Result.Should().BeOfType<OkObjectResult>().Subject;
        
        var json = JsonSerializer.Serialize(okResult.Value);
        var jsonElement = JsonSerializer.Deserialize<JsonElement>(json);
        
        jsonElement.GetProperty("isSuperAdmin").GetBoolean().Should().BeTrue();
    }
    
    [Fact]
    public void CheckAuth_WithNoUserId_ReturnsUnauthorized()
    {
        // Arrange
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Email, "test@example.com"),
            new Claim(ClaimTypes.Role, nameof(Role.Client))
        };

        var identity = new ClaimsIdentity(claims, "Test");
        var user = new ClaimsPrincipal(identity);

        _controller.ControllerContext = new ControllerContext
        {
            HttpContext = new DefaultHttpContext { User = user }
        };

        // Act
        var result = _controller.CheckAuth();

        // Assert
        result.Result.Should().BeOfType<UnauthorizedResult>();
    }
    
    [Fact]
    public void CheckAuth_WithException_ReturnsUnauthorized()
    {
        // Arrange - set up a null User to trigger an exception
        _controller.ControllerContext = new ControllerContext
        {
            HttpContext = new DefaultHttpContext { User = null }
        };

        // Act
        var result = _controller.CheckAuth();

        // Assert
        result.Result.Should().BeOfType<UnauthorizedResult>();
    }
    
    [Fact]
    public async Task Login_WithValidCredentials_SetsCookie()
    {
        // Arrange
        var authRequest = new AuthenticationRequest
        {
            Email = "test@example.com",
            Password = "P@ssw0rd"
        };

        var authResponse = new AuthenticationResponse
        {
            Id = 1,
            Username = "testuser",
            Email = "test@example.com",
            JwtToken = "test-jwt-token",
            TokenExpires = DateTime.UtcNow.AddHours(1)
        };

        _mockAuthService
            .Setup(s => s.AuthenticateAsync(authRequest))
            .ReturnsAsync(authResponse);

        // Set up HttpContext with Response cookies
        var httpContext = new DefaultHttpContext();
        _controller.ControllerContext = new ControllerContext
        {
            HttpContext = httpContext
        };

        // Act
        await _controller.Login(authRequest);

        // Assert
        httpContext.Response.Headers.Should().ContainKey("Set-Cookie");
    }
    
    [Fact]
    public async Task Logout_ClearsCookie()
    {
        // Arrange
        _mockAuthService
            .Setup(s => s.LogoutAsync())
            .Returns(Task.CompletedTask);

        // Set up HttpContext with Response cookies
        var httpContext = new DefaultHttpContext();
        _controller.ControllerContext = new ControllerContext
        {
            HttpContext = httpContext
        };

        // Act
        await _controller.Logout();

        // Assert
        httpContext.Response.Headers.Should().ContainKey("Set-Cookie");
    }
    
    [Fact]
    public async Task Logout_WithException_ReturnsBadRequest()
    {
        // Arrange
        _mockAuthService
            .Setup(s => s.LogoutAsync())
            .ThrowsAsync(new Exception("Logout failed"));

        // Act
        var result = await _controller.Logout();

        // Assert
        result.Should().BeOfType<BadRequestObjectResult>();
        var badRequestResult = (BadRequestObjectResult)result;
        
        var json = JsonSerializer.Serialize(badRequestResult.Value);
        var jsonElement = JsonSerializer.Deserialize<JsonElement>(json);
        
        jsonElement.GetProperty("message").GetString().Should().Be("Logout failed");
        jsonElement.GetProperty("error").GetString().Should().Be("Logout failed");
    }
} 