//Generated by AI
using FluentAssertions;
using Microsoft.AspNetCore.Mvc;
using Moq;
using PolicyManagement.Application.DTOs.Policy;
using PolicyManagement.Application.Interfaces.Services;
using PolicyManagementApp.Api.Controllers;
using Xunit;

namespace PolicyManagement.Api.UnitTests.Controllers;

public class PolicyControllerTests
{
    private readonly Mock<IPolicyService> _mockPolicyService;
    private readonly PolicyController _controller;

    public PolicyControllerTests()
    {
        _mockPolicyService = new Mock<IPolicyService>();
        _controller = new PolicyController(_mockPolicyService.Object);
    }

    [Fact]
    public async Task GetPolicies_ReturnsOkObjectResult_WithPaginatedPolicies()
    {
        // Arrange
        var pageNumber = 1;
        var pageSize = 10;
        var policyResponseDto = new PolicyResponseDto
        {
            Policies = new List<PolicyDto>
            {
                new PolicyDto { Id = 1, Name = "Test Policy 1" },
                new PolicyDto { Id = 2, Name = "Test Policy 2" }
            },
            TotalCount = 2,
            PageNumber = pageNumber,
            PageSize = pageSize
        };

        _mockPolicyService
            .Setup(s => s.GetPoliciesPaginatedAsync(pageNumber, pageSize))
            .ReturnsAsync(policyResponseDto);

        // Act
        var result = await _controller.GetPolicies(pageNumber, pageSize);

        // Assert
        var okResult = result.Should().BeOfType<OkObjectResult>().Subject;
        okResult.Value.Should().BeEquivalentTo(policyResponseDto);
    }

    [Fact]
    public async Task GetPolicy_WithValidId_ReturnsOkObjectResult()
    {
        // Arrange
        var policyId = 1;
        var policyDto = new PolicyDto { Id = policyId, Name = "Test Policy" };

        _mockPolicyService
            .Setup(s => s.GetPolicyByIdAsync(policyId))
            .ReturnsAsync(policyDto);

        // Act
        var result = await _controller.GetPolicy(policyId);

        // Assert
        var okResult = result.Should().BeOfType<OkObjectResult>().Subject;
        okResult.Value.Should().BeEquivalentTo(policyDto);
    }

    [Fact]
    public async Task GetPolicy_WithInvalidId_ReturnsNotFoundResult()
    {
        // Arrange
        var policyId = 1;

        _mockPolicyService
            .Setup(s => s.GetPolicyByIdAsync(policyId))
            .ReturnsAsync((PolicyDto)null);

        // Act
        var result = await _controller.GetPolicy(policyId);

        // Assert
        result.Should().BeOfType<NotFoundResult>();
    }

    [Fact]
    public async Task CreatePolicy_WithValidModel_ReturnsCreatedAtActionResult()
    {
        // Arrange
        var createPolicyDto = new CreatePolicyDto { Name = "New Policy" };
        var createdPolicyDto = new PolicyDto { Id = 1, Name = "New Policy" };

        _mockPolicyService
            .Setup(s => s.CreatePolicyAsync(createPolicyDto))
            .ReturnsAsync(createdPolicyDto);

        // Act
        var result = await _controller.CreatePolicy(createPolicyDto);

        // Assert
        var createdAtActionResult = result.Should().BeOfType<CreatedAtActionResult>().Subject;
        createdAtActionResult.ActionName.Should().Be(nameof(PolicyController.GetPolicy));
        createdAtActionResult.RouteValues.Should().ContainKey("id").WhoseValue.Should().Be(createdPolicyDto.Id);
        createdAtActionResult.Value.Should().BeEquivalentTo(createdPolicyDto);
    }

    [Fact]
    public async Task CreatePolicy_WithInvalidModel_ReturnsBadRequestResult()
    {
        // Arrange
        var createPolicyDto = new CreatePolicyDto(); // Invalid model
        _controller.ModelState.AddModelError("Name", "Required");

        // Act
        var result = await _controller.CreatePolicy(createPolicyDto);

        // Assert
        result.Should().BeOfType<BadRequestObjectResult>();
    }

    [Fact]
    public async Task UpdatePolicy_WithValidIdAndModel_ReturnsOkObjectResult()
    {
        // Arrange
        var policyId = 1;
        var updatePolicyDto = new UpdatePolicyDto { Id = policyId, Name = "Updated Policy" };
        var updatedPolicyDto = new PolicyDto { Id = policyId, Name = "Updated Policy" };

        _mockPolicyService
            .Setup(s => s.UpdatePolicyAsync(policyId, updatePolicyDto))
            .ReturnsAsync(updatedPolicyDto);

        // Act
        var result = await _controller.UpdatePolicy(policyId, updatePolicyDto);

        // Assert
        var okResult = result.Should().BeOfType<OkObjectResult>().Subject;
        okResult.Value.Should().BeEquivalentTo(updatedPolicyDto);
    }

    [Fact]
    public async Task UpdatePolicy_WithInvalidModel_ReturnsBadRequestResult()
    {
        // Arrange
        var policyId = 1;
        var updatePolicyDto = new UpdatePolicyDto { Id = policyId }; // Invalid model
        _controller.ModelState.AddModelError("Name", "Required");

        // Act
        var result = await _controller.UpdatePolicy(policyId, updatePolicyDto);

        // Assert
        result.Should().BeOfType<BadRequestObjectResult>();
    }

    [Fact]
    public async Task UpdatePolicy_WithNonExistentId_ReturnsNotFoundResult()
    {
        // Arrange
        var policyId = 1;
        var updatePolicyDto = new UpdatePolicyDto { Id = policyId, Name = "Updated Policy" };

        _mockPolicyService
            .Setup(s => s.UpdatePolicyAsync(policyId, updatePolicyDto))
            .ThrowsAsync(new KeyNotFoundException());

        // Act
        var result = await _controller.UpdatePolicy(policyId, updatePolicyDto);

        // Assert
        result.Should().BeOfType<NotFoundResult>();
    }

    [Fact]
    public async Task DeletePolicy_WithValidId_ReturnsOkObjectResult()
    {
        // Arrange
        var policyId = 1;
        var policyDto = new PolicyDto { Id = policyId, Name = "Test Policy" };

        _mockPolicyService
            .Setup(s => s.DeletePolicyAsync(policyId))
            .ReturnsAsync(policyDto);

        // Act
        var result = await _controller.DeletePolicy(policyId);

        // Assert
        var okResult = result.Should().BeOfType<OkObjectResult>().Subject;
        okResult.Value.Should().BeEquivalentTo(policyDto);
    }

    [Fact]
    public async Task DeletePolicy_WithNonExistentId_ReturnsNotFoundResult()
    {
        // Arrange
        var policyId = 1;

        _mockPolicyService
            .Setup(s => s.DeletePolicyAsync(policyId))
            .ThrowsAsync(new KeyNotFoundException());

        // Act
        var result = await _controller.DeletePolicy(policyId);

        // Assert
        result.Should().BeOfType<NotFoundResult>();
    }
} 